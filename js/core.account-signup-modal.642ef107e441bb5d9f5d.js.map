{"version":3,"sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx","webpack:///./App/Containers/AccountSignupModal/account-signup-modal.jsx"],"names":["SetResidenceForm","class_prefix","children","default_value","header_text","errors","touched","setFieldTouched","setFieldValue","residence_list","React","className","as","weight","localize","name","field","autoComplete","type","label","error","residence","required","list_items","onItemSelection","value","text","should_filter_by_char","placeholder","use_text","onChange","e","target","propTypes","PropTypes","node","string","arrayOf","object","signupInitialValues","password","AccountSignup","enableApp","isModalVisible","clients_country","is_account_signup_modal_visible","onSignup","PlatformContext","is_deriv_crypto","is_dashboard","api_error","setApiError","is_loading","setIsLoading","country","setCountry","pw_input","setPWInput","has_valid_residence","setHasValidResidence","onResidenceSelection","WS","wait","then","getLocation","onSignupComplete","is_fullscreen","initialValues","validate","values","validLength","min","max","validPassword","getErrorMessages","min_number","max_number","index_of_selection","findIndex","item","toLowerCase","disabled","website_name","validateSignup","onSubmit","modded_values","isSubmitting","handleBlur","handleChange","i18n_default_text","input","has_error","custom_feedback_messages","password_warnings","onBlur","new_password","size","align","color","secondary","onClick","primary","redirectToSignUp","classNames","is_disabled","func","array","bool","AccountSignupModal","disableApp","is_visible","is_logged_in","logout","toggleAccountSignupModal","length","is_mobile_full_width","is_content_centered","connect","ui","client"],"mappings":"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","file":"js/core.account-signup-modal.642ef107e441bb5d9f5d.js","sourcesContent":["import { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Autocomplete, DesktopWrapper, MobileWrapper, SelectNative, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    class_prefix = 'set-residence',\n    children,\n    default_value,\n    header_text,\n    errors,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => {\n    React.useEffect(() => {\n        if (default_value) {\n            setFieldTouched('residence', true);\n            setFieldValue('residence', default_value, true);\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n    return (\n        <div className={`${class_prefix}__residence-selection`}>\n            {!!header_text && (\n                <Text as='p' weight='bold' className={`${class_prefix}__heading`}>\n                    {header_text}\n                </Text>\n            )}\n            <Text as='p' className={`${class_prefix}__${header_text ? 'text' : 'heading'}`}>\n                {localize('Where do you live?')}\n            </Text>\n            <Field name='residence'>\n                {({ field }) => (\n                    <React.Fragment>\n                        <DesktopWrapper>\n                            <Autocomplete\n                                {...field}\n                                autoComplete='off'\n                                className={`${class_prefix}__residence-field`}\n                                type='text'\n                                label={localize('Choose country')}\n                                error={touched.residence && errors.residence}\n                                required\n                                list_items={residence_list}\n                                onItemSelection={({ value, text }) =>\n                                    setFieldValue('residence', value ? text : '', true)\n                                }\n                                should_filter_by_char\n                            />\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <SelectNative\n                                placeholder={localize('Please select')}\n                                label={localize('Choose country')}\n                                value={field.value}\n                                list_items={residence_list}\n                                error={touched.residence && errors.residence}\n                                required\n                                use_text\n                                onChange={e => {\n                                    setFieldTouched('residence', true);\n                                    setFieldValue('residence', e.target.value, true);\n                                }}\n                            />\n                        </MobileWrapper>\n                    </React.Fragment>\n                )}\n            </Field>\n            {children}\n        </div>\n    );\n};\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.node,\n    default_value: PropTypes.string,\n    class_prefix: PropTypes.string,\n    header_text: PropTypes.string,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SetResidenceForm;\n","import classNames from 'classnames';\nimport { Field, Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Dialog, Loading, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport {\n    validPassword,\n    getLocation,\n    validLength,\n    website_name,\n    getErrorMessages,\n    PlatformContext,\n    redirectToSignUp,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { WS } from 'Services';\nimport { connect } from 'Stores/connect';\nimport ResidenceForm from '../SetResidenceModal/set-residence-form.jsx';\nimport 'Sass/app/modules/account-signup.scss';\n\nconst signupInitialValues = { password: '', residence: '' };\n\nconst validateSignup = (values, residence_list) => {\n    const errors = {};\n\n    if (\n        !validLength(values.password, {\n            min: 8,\n            max: 25,\n        })\n    ) {\n        errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n            min_number: 8,\n            max_number: 25,\n        });\n    } else if (!validPassword(values.password)) {\n        errors.password = getErrorMessages().password();\n    }\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    return errors;\n};\n\nconst AccountSignup = ({\n    enableApp,\n    isModalVisible,\n    clients_country,\n    is_account_signup_modal_visible,\n    onSignup,\n    residence_list,\n}) => {\n    const { is_deriv_crypto, is_dashboard } = React.useContext(PlatformContext);\n\n    const [api_error, setApiError] = React.useState(false);\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [country, setCountry] = React.useState('');\n    const [pw_input, setPWInput] = React.useState('');\n    const [has_valid_residence, setHasValidResidence] = React.useState(false);\n\n    const updatePassword = new_password => {\n        setPWInput(new_password);\n    };\n\n    const onResidenceSelection = () => {\n        setHasValidResidence(true);\n    };\n\n    // didMount lifecycle hook\n    React.useEffect(() => {\n        WS.wait('website_status', 'residence_list').then(() => {\n            if (clients_country && residence_list) {\n                setCountry(getLocation(residence_list, clients_country, 'text'));\n            }\n            setIsLoading(false);\n        });\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const onSignupComplete = error => {\n        if (error) {\n            setApiError(error);\n        } else {\n            isModalVisible(false);\n            enableApp();\n        }\n    };\n\n    const validateSignupPassthrough = values => validateSignup(values, residence_list);\n    const onSignupPassthrough = values => {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        const modded_values = {\n            ...values,\n            residence: residence_list[index_of_selection].value,\n            is_deriv_crypto,\n            is_account_signup_modal_visible,\n        };\n        onSignup(modded_values, onSignupComplete);\n    };\n\n    return (\n        <div className='account-signup'>\n            {is_loading ? (\n                <Loading is_fullscreen={false} />\n            ) : (\n                <Formik\n                    initialValues={signupInitialValues}\n                    validate={validateSignupPassthrough}\n                    onSubmit={onSignupPassthrough}\n                >\n                    {({\n                        isSubmitting,\n                        handleBlur,\n                        errors,\n                        handleChange,\n                        values,\n                        setFieldValue,\n                        setFieldTouched,\n                        touched,\n                    }) => (\n                        <Form>\n                            {!has_valid_residence ? (\n                                <ResidenceForm\n                                    header_text={localize('Thanks for verifying your email')}\n                                    class_prefix='account-signup'\n                                    errors={errors}\n                                    touched={touched}\n                                    setFieldTouched={setFieldTouched}\n                                    setFieldValue={setFieldValue}\n                                    residence_list={residence_list}\n                                    default_value={country}\n                                >\n                                    <Button\n                                        className={classNames('account-signup__btn', {\n                                            'account-signup__btn--disabled': !values.residence || errors.residence,\n                                        })}\n                                        type='button'\n                                        is_disabled={!values.residence || !!errors.residence}\n                                        onClick={onResidenceSelection}\n                                        primary\n                                        text={localize('Next')}\n                                    />\n                                </ResidenceForm>\n                            ) : (\n                                <div className='account-signup__password-selection'>\n                                    <Text as='p' weight='bold' className='account-signup__heading'>\n                                        <Localize i18n_default_text='Keep your account secure with a password' />\n                                    </Text>\n                                    <Field name='password'>\n                                        {({ field }) => (\n                                            <PasswordMeter\n                                                input={pw_input}\n                                                has_error={!!(touched.password && errors.password)}\n                                                custom_feedback_messages={getErrorMessages().password_warnings}\n                                            >\n                                                <PasswordInput\n                                                    {...field}\n                                                    className='account-signup__password-field'\n                                                    label={localize('Create a password')}\n                                                    error={touched.password && errors.password}\n                                                    required\n                                                    value={values.password}\n                                                    onBlur={handleBlur}\n                                                    onChange={e => {\n                                                        const input = e.target;\n                                                        setFieldTouched('password', true);\n                                                        if (input) updatePassword(input.value);\n                                                        handleChange(e);\n                                                    }}\n                                                />\n                                            </PasswordMeter>\n                                        )}\n                                    </Field>\n\n                                    <Text as='p' size='xxs' className='account-signup__subtext' align='center'>\n                                        <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                    </Text>\n\n                                    {api_error ? (\n                                        <React.Fragment>\n                                            <Text\n                                                as='p'\n                                                size='xxs'\n                                                color='loss-danger'\n                                                className='account-signup__subtext account-signup__subtext--error'\n                                                align='center'\n                                            >\n                                                {api_error}\n                                            </Text>\n                                            <div className='account-signup__error-wrapper'>\n                                                <Button\n                                                    secondary\n                                                    text={localize('Cancel')}\n                                                    type='button'\n                                                    onClick={() => isModalVisible(false)}\n                                                />\n                                                <Button\n                                                    primary\n                                                    text={localize('Create new account')}\n                                                    type='button'\n                                                    onClick={() => redirectToSignUp({ is_deriv_crypto, is_dashboard })}\n                                                />\n                                            </div>\n                                        </React.Fragment>\n                                    ) : (\n                                        <Button\n                                            className={classNames('account-signup__btn', {\n                                                'account-signup__btn--disabled':\n                                                    !values.password || errors.password || isSubmitting,\n                                            })}\n                                            type='submit'\n                                            is_disabled={!values.password || !!errors.password || isSubmitting}\n                                            text={localize('Start trading')}\n                                            primary\n                                        />\n                                    )}\n                                </div>\n                            )}\n                        </Form>\n                    )}\n                </Formik>\n            )}\n        </div>\n    );\n};\n\nAccountSignup.propTypes = {\n    enableApp: PropTypes.func,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.array,\n    isModalVisible: PropTypes.func,\n    is_account_signup_modal_visible: PropTypes.bool,\n};\n\nconst AccountSignupModal = ({\n    enableApp,\n    disableApp,\n    clients_country,\n    is_loading,\n    is_visible,\n    is_logged_in,\n    logout,\n    onSignup,\n    residence_list,\n    toggleAccountSignupModal,\n}) => {\n    React.useEffect(() => {\n        // a logged in user should not be able to create a new account\n        if (is_visible && is_logged_in) {\n            logout();\n        }\n    }, [is_visible, is_logged_in, logout]);\n\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_mobile_full_width={false}\n            is_content_centered\n        >\n            <AccountSignup\n                clients_country={clients_country}\n                onSignup={onSignup}\n                residence_list={residence_list}\n                isModalVisible={toggleAccountSignupModal}\n                enableApp={enableApp}\n                is_account_signup_modal_visible={is_visible}\n            />\n        </Dialog>\n    );\n};\n\nAccountSignupModal.propTypes = {\n    clients_country: PropTypes.string,\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_account_signup_modal_visible,\n    toggleAccountSignupModal: ui.toggleAccountSignupModal,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    onSignup: client.onSignup,\n    is_logged_in: client.is_logged_in,\n    residence_list: client.residence_list,\n    clients_country: client.clients_country,\n    logout: client.logout,\n}))(AccountSignupModal);\n"],"sourceRoot":""}