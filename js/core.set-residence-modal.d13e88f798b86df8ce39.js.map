{"version":3,"sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx","webpack:///./App/Containers/SetResidenceModal/set-residence-modal.jsx"],"names":["SetResidenceForm","class_prefix","children","default_value","header_text","errors","touched","setFieldTouched","setFieldValue","residence_list","React","className","as","weight","localize","name","field","autoComplete","type","label","error","residence","required","list_items","onItemSelection","value","text","should_filter_by_char","placeholder","use_text","onChange","e","target","propTypes","PropTypes","node","string","arrayOf","object","isResidenceText","item","values","toLowerCase","SetResidence","enableApp","onSetResidence","toggleModalVisibility","onSetResidenceComplete","Error","initialValues","validate","index_of_selection","findIndex","disabled","website_name","validateResidence","onSubmit","modded_values","isSubmitting","size","classNames","is_disabled","primary","func","array","SetResidenceModal","disableApp","is_loading","is_visible","toggleSetResidenceModal","length","is_content_centered","bool","connect","ui","client","is_set_residence_modal_visible"],"mappings":"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","file":"js/core.set-residence-modal.d13e88f798b86df8ce39.js","sourcesContent":["import { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Autocomplete, DesktopWrapper, MobileWrapper, SelectNative, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    class_prefix = 'set-residence',\n    children,\n    default_value,\n    header_text,\n    errors,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => {\n    React.useEffect(() => {\n        if (default_value) {\n            setFieldTouched('residence', true);\n            setFieldValue('residence', default_value, true);\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n    return (\n        <div className={`${class_prefix}__residence-selection`}>\n            {!!header_text && (\n                <Text as='p' weight='bold' className={`${class_prefix}__heading`}>\n                    {header_text}\n                </Text>\n            )}\n            <Text as='p' className={`${class_prefix}__${header_text ? 'text' : 'heading'}`}>\n                {localize('Where do you live?')}\n            </Text>\n            <Field name='residence'>\n                {({ field }) => (\n                    <React.Fragment>\n                        <DesktopWrapper>\n                            <Autocomplete\n                                {...field}\n                                autoComplete='off'\n                                className={`${class_prefix}__residence-field`}\n                                type='text'\n                                label={localize('Choose country')}\n                                error={touched.residence && errors.residence}\n                                required\n                                list_items={residence_list}\n                                onItemSelection={({ value, text }) =>\n                                    setFieldValue('residence', value ? text : '', true)\n                                }\n                                should_filter_by_char\n                            />\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <SelectNative\n                                placeholder={localize('Please select')}\n                                label={localize('Choose country')}\n                                value={field.value}\n                                list_items={residence_list}\n                                error={touched.residence && errors.residence}\n                                required\n                                use_text\n                                onChange={e => {\n                                    setFieldTouched('residence', true);\n                                    setFieldValue('residence', e.target.value, true);\n                                }}\n                            />\n                        </MobileWrapper>\n                    </React.Fragment>\n                )}\n            </Field>\n            {children}\n        </div>\n    );\n};\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.node,\n    default_value: PropTypes.string,\n    class_prefix: PropTypes.string,\n    header_text: PropTypes.string,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SetResidenceForm;\n","import classNames from 'classnames';\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Dialog, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { website_name } from '@deriv/shared';\nimport ResidenceForm from './set-residence-form.jsx';\nimport 'Sass/app/modules/set-residence.scss';\n\n// TODO: Move some of these functions to helpers since some of them are shared with AccountSignUpModal\nconst isResidenceText = (item, values) => item.text.toLowerCase() === values.residence.toLowerCase();\n\nconst validateResidence = (values, residence_list) => {\n    const errors = {};\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(item => isResidenceText(item, values));\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    return errors;\n};\n\nconst SetResidence = ({ enableApp, onSetResidence, residence_list, toggleModalVisibility }) => {\n    const onSetResidenceComplete = error => {\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error) {\n            throw Error(error);\n        }\n        // Handle lower level modal controls due to overriding modal rendering\n        toggleModalVisibility(false);\n        enableApp();\n    };\n\n    const onSetResidencePassthrough = values => {\n        const index_of_selection = residence_list.findIndex(item => isResidenceText(item, values));\n        const modded_values = { ...values, residence: residence_list[index_of_selection].value };\n        onSetResidence(modded_values, onSetResidenceComplete);\n    };\n    return (\n        <div className='set-residence'>\n            <Formik\n                initialValues={{ residence: '' }}\n                validate={values => validateResidence(values, residence_list)}\n                onSubmit={onSetResidencePassthrough}\n            >\n                {({ isSubmitting, errors, values, setFieldValue, touched }) => (\n                    <Form>\n                        <React.Fragment>\n                            <ResidenceForm\n                                errors={errors}\n                                touched={touched}\n                                setFieldValue={setFieldValue}\n                                residence_list={residence_list}\n                            >\n                                <Text as='p' size='xxs' weight='bold' className='set-residence__subtext'>\n                                    {localize(\n                                        'We need this to make sure our service complies with laws and regulations in your country.'\n                                    )}\n                                </Text>\n                                <Button\n                                    className={classNames('set-residence__btn', {\n                                        'set-residence__btn--disabled':\n                                            !values.residence || errors.residence || isSubmitting,\n                                    })}\n                                    type='submit'\n                                    is_disabled={!values.residence || !!errors.residence || isSubmitting}\n                                    text={localize('Set residence')}\n                                    primary\n                                />\n                            </ResidenceForm>\n                        </React.Fragment>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nSetResidence.propTypes = {\n    enableApp: PropTypes.func,\n    onSetResidence: PropTypes.func,\n    residence_list: PropTypes.array,\n    toggleModalVisibility: PropTypes.func,\n};\n\nconst SetResidenceModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    onSetResidence,\n    residence_list,\n    toggleSetResidenceModal,\n}) => {\n    if (residence_list.length < 1) return null;\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_content_centered\n        >\n            <SetResidence\n                onSetResidence={onSetResidence}\n                residence_list={residence_list}\n                toggleModalVisibility={toggleSetResidenceModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n};\n\nSetResidenceModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    onSetResidence: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_set_residence_modal_visible,\n    toggleSetResidenceModal: ui.toggleSetResidenceModal,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    onSetResidence: client.onSetResidence,\n    residence_list: client.residence_list,\n}))(SetResidenceModal);\n"],"sourceRoot":""}